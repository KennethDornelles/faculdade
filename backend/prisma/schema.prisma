// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== USUÁRIOS E AUTENTICAÇÃO =====
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  phone     String?
  document  String?  @unique // CPF
  role      UserRole @default(CUSTOMER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  addresses     Address[]
  orders        Order[]
  cart          Cart?
  notifications Notification[]
  couponUsages  CouponUsage[]
  auditLogs     AuditLog[]

  @@map("users")
}

enum UserRole {
  ADMIN
  CUSTOMER
}

// ===== ENDEREÇOS =====
model Address {
  id           Int     @id @default(autoincrement())
  userId       Int
  zipCode      String  // CEP
  street       String
  number       String
  complement   String?
  neighborhood String
  city         String
  state        String
  isDefault    Boolean @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relacionamentos
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]

  @@map("addresses")
}

// ===== PRODUTOS DE PETSHOP =====
enum PetType {
  DOG
  CAT
  BIRD
  FISH
  RODENT
  REPTILE
  OTHER
}

enum ProductCategory {
  FOOD
  TOYS
  HYGIENE
  ACCESSORIES
  MEDICINE
  AQUARIUM
  CAGES
}

model Product {
  id              Int             @id @default(autoincrement())
  name            String
  description     String?
  price           Decimal         @db.Decimal(10, 2)
  image           String
  productCategory ProductCategory
  petType         PetType[]
  brand           String?
  stock           Int             @default(0)
  isActive        Boolean         @default(true)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relacionamentos
  orderItems OrderItem[]
  cartItems  CartItem[]

  @@map("products")
}

// ===== CARRINHO =====
model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]

  @@map("carts")
}

model CartItem {
  id        Int @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int @default(1)

  // Relacionamentos
  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId])
  @@map("cart_items")
}

// ===== PEDIDOS =====
model Order {
  id            Int         @id @default(autoincrement())
  orderNumber   String      @unique
  userId        Int
  addressId     Int
  status        OrderStatus @default(PENDING)
  paymentMethod PaymentMethod
  paymentStatus PaymentStatus @default(PENDING)
  subtotal      Decimal     @db.Decimal(10, 2)
  shipping      Decimal     @db.Decimal(10, 2)
  total         Decimal     @db.Decimal(10, 2)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relacionamentos
  user    User        @relation(fields: [userId], references: [id])
  address Address     @relation(fields: [addressId], references: [id])
  items   OrderItem[]
  payment Payment?

  @@map("orders")
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  total     Decimal @db.Decimal(10, 2)

  // Relacionamentos
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  PIX
  CREDIT_CARD
  DEBIT_CARD
  BOLETO
}

enum PaymentStatus {
  PENDING
  PROCESSING
  APPROVED
  REJECTED
  CANCELLED
  REFUNDED
}

// ===== PAGAMENTOS =====
model Payment {
  id                String        @id @default(cuid())
  orderId           Int           @unique
  method            PaymentMethod
  status            PaymentStatus @default(PENDING)
  amount            Decimal       @db.Decimal(10, 2)
  transactionId     String?       // ID da transação no gateway
  gatewayResponse   Json?         // Resposta completa do gateway
  pixCode           String?       // Código PIX gerado
  boletoUrl         String?       // URL do boleto
  installments      Int?          @default(1)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relacionamentos
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

// ===== CONFIGURAÇÕES DO SISTEMA =====
model Setting {
  id    Int    @id @default(autoincrement())
  key   String @unique
  value String
  type  String // Ex: 'STRING', 'NUMBER', 'BOOLEAN'
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("settings")
}

// ===== NOTIFICAÇÕES =====
model Notification {
  id        Int              @id @default(autoincrement())
  userId    Int
  title     String
  message   String
  type      NotificationType @default(INFO)
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Relacionamentos
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  ORDER_UPDATE
}

// ===== CUPONS DE DESCONTO =====
model Coupon {
  id          Int         @id @default(autoincrement())
  code        String      @unique
  description String?
  type        CouponType
  value       Decimal     @db.Decimal(10, 2)
  minAmount   Decimal?    @db.Decimal(10, 2)
  usageLimit  Int?
  usageCount  Int         @default(0)
  isActive    Boolean     @default(true)
  expiresAt   DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relacionamentos
  couponUsages CouponUsage[]

  @@map("coupons")
}

model CouponUsage {
  id       Int @id @default(autoincrement())
  couponId Int
  orderId  Int
  userId   Int
  usedAt   DateTime @default(now())

  // Relacionamentos
  coupon Coupon @relation(fields: [couponId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
  order  Order  @relation(fields: [orderId], references: [id])

  @@unique([couponId, orderId])
  @@map("coupon_usages")
}

enum CouponType {
  PERCENTAGE
  FIXED_VALUE
  FREE_SHIPPING
}

// ===== AUDITORIA =====
model AuditLog {
  id        Int      @id @default(autoincrement())
  userId    Int?
  action    String   // Ex: 'CREATE_PRODUCT', 'UPDATE_USER_ROLE'
  entity    String   // Ex: 'Product', 'User'
  entityId  String
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  // Relacionamentos
  user User? @relation(fields: [userId], references: [id], onUpdate: NoAction, onDelete: NoAction)

  @@map("audit_logs")
}
